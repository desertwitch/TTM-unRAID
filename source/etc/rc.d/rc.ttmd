#!/bin/bash
#
# Copyright Derek Macias (parts of code from NUT package)
# Copyright macester (parts of code from NUT package)
# Copyright gfjardim (parts of code from NUT package)
# Copyright SimonF (parts of code from NUT package)
# Copyright Lime Technology (any and all other parts of Unraid)
#
# Copyright desertwitch (as author and maintainer of this file)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#

TTMCONF="/boot/config/plugins/dwttm/dwttm.cfg"
[ -e "$TTMCONF" ] && source $TTMCONF

ttmd_start() {
    echo "Starting ttmd service..."
    if type tmux >/dev/null 2>&1 && tmux -V >/dev/null 2>&1; then
        if pgrep -x ttmd &>/dev/null; then
            echo "ttmd service is already running."
            return 0
        else
            [[ $SERVICEPORT =~ ^[0-9]+$ ]] && PORTOPT="--port=$SERVICEPORT"
            [[ $SERVICESEC == "disable" ]] && SSECOPT="--csrf=false"
            nohup /usr/bin/ttmd "$PORTOPT" "$SSECOPT" &>/var/log/ttmd.log &
            TTMD_PID=$!
            echo $TTMD_PID > /var/run/ttmd.pid
            sleep 2
            if pgrep -x ttmd &>/dev/null; then
                echo "ttmd service was started - PID: $TTMD_PID."
                return 0
            else
                echo "ttmd service was started but then died - port already in use?"
                rm -f /var/run/ttmd.pid
                return 1
            fi
        fi
    else
        echo "Error: Unable to start ttmd - Tmux not found or not functional."
        echo "Error: Please refer to the 'TTM Settings' for more information on this issue."
        return 1
    fi
}

ttmd_stop() {
    echo "Stopping ttmd service..."
    if pgrep -x ttmd &>/dev/null; then
        TIMER=0
        while killall ttmd 2>/dev/null; do
            sleep 1
            TIMER=$((TIMER+1))
            if [ $TIMER -ge 10 ]; then
                echo "Hard-killing non-responsive ttmd service..."
                killall -9 ttmd 2>/dev/null
                sleep 1
                break
            fi
        done
        if ! pgrep -x ttmd &>/dev/null; then
            if [ -f /var/run/ttmd.pid ]; then
                rm -f /var/run/ttmd.pid
            fi
            echo "ttmd service was stopped."
            return 0
        else
            echo "ttmd service could not be killed."
            return 1
        fi
    else
        echo "ttmd service is not running."
        return 0
    fi
}

ttmd_restart() {
  ttmd_stop
  sleep 1
  ttmd_start
  return $?
}

ttmd_configure() {
    if [[ $OSCONFIGURE != "disable" ]]; then
        [ -f /etc/tmux.conf ] && sed -i 's/tmux-256color/xterm-256color/g' /etc/tmux.conf
        [ -f /root/.tmux.conf ] && sed -i 's/tmux-256color/xterm-256color/g' /root/.tmux.conf
    fi
}

case "$1" in
  'start')
    ttmd_configure
    ttmd_start
    exit $?
  ;;
  'stop')
    ttmd_configure
    ttmd_stop
    exit $?
  ;;
  'restart')
    ttmd_configure
    ttmd_restart
    exit $?
  ;;
  'configure')
    ttmd_configure
    exit 0
  ;;
  *)
    echo "Usage: $0 start|stop|restart|configure"
    exit 1
  ;;
esac
