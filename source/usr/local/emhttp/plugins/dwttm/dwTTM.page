Menu="Utilities"
Type="xmenu"
Title="TTerminal Manager (TTM)"
Icon="tty"
Tag="tty"
Markdown="false"
---
<?
/* Copyright Derek Macias (parts of code from NUT package)
 * Copyright macester (parts of code from NUT package)
 * Copyright gfjardim (parts of code from NUT package)
 * Copyright SimonF (parts of code from NUT package)
 * Copyright Dan Landon (parts of code from Web GUI)
 * Copyright Bergware International (parts of code from Web GUI)
 * Copyright Lime Technology (any and all other parts of Unraid)
 *
 * Copyright desertwitch (as author and maintainer of this file)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 */
require_once '/usr/local/emhttp/plugins/dwttm/include/dwttm_config.php';
?>

<script src="<?=autov('/plugins/dwttm/js/xterm.js');?>"></script>
<script src="<?=autov('/plugins/dwttm/js/xterm-fit.js');?>"></script>

<link type="text/css" rel="stylesheet" href="<?=autov('/plugins/dwttm/css/xterm.css');?>">

<style>
body {
    margin: 0;
    padding: 0;
    overflow-x: hidden;
}

.termtable {
    width: 100%;
    table-layout: fixed;
}

.termtable td {
    overflow: hidden;
}

#terminal-container {
    width: 100%;
    height: 430px;
}

.xterm .xterm-viewport {
    overflow: hidden;
}

#session-list-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    justify-content: flex-start;
}

.session-item {
    position: relative;
    width: 300px;
    border: 1px solid #ddd;
    padding: 10px;
    background-color: #f9f9f9;
    border-radius: 5px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.session-item canvas {
    display: block;
    margin: 0 auto 10px;
    border: 1px solid #ccc;
}

.session-item .fallback-text {
    font-size: 14px;
    color: #666;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.session-item.connected {
    background-color: #333;
    color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

.session-item.connected .session-link {
    color: #fff;
}

.session-item.connected canvas {
    border-color: #555;
}

.session-item.add-new {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 300px;
    border: 1px solid #ddd;
    background-color: #f9f9f9;
    border-radius: 5px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.session-item.add-new:hover {
    background-color: #e6f7ff;
}

.plus-icon {
    font-size: 50px;
    color: #007bff;
}

.add-new-text {
    font-size: 14px;
    color: #007bff;
    margin-top: 10px;
}

.session-link {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
    color: #007bff;
    text-decoration: none;
    cursor: pointer;
}

.session-link:hover {
    text-decoration: underline;
}

.trash-icon {
    position: absolute;
    top: 7px;
    left: 12px;
    font-size: 13px;
    color: #dc3545;
    cursor: pointer;
    transition: color 0.2s ease;
}

.trash-icon:hover {
    color: #a71d2a;
}

.popup-icon {
    position: absolute;
    top: 7px;
    right: 12px;
    font-size: 13px;
    color: #2E8B57;
    cursor: pointer;
    transition: color 0.2s ease;
}

.popup-icon:hover {
    color: #3CB371;
}
</style>

<?if($dwttm_running):?>
<table class="tablesorter shift termtable">
<thead>
    <tr>
        <th><strong>TTerminal</strong></th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>
            <div id="terminal-container"></div>
        </td>
    </tr>
</tbody>
</table>


<table class="tablesorter">
<thead>
    <tr>
        <th><strong>TTerminal Session Management</strong></th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>
            <div id="session-list-container">
                <ul id="session-list"></ul>
            </div>
        </td>
    </tr>
</tbody>
</table>

<br><br><hr><br>
<?endif;?>

<div>
    <span class="left" style="font-size:1.1rem;letter-spacing:1px;padding-left:5px;"><strong><i class="icon fa fa-cogs"></i>GENERAL SETTINGS</strong></span>
</div><br>

<form markdown="0" id="dwttm-settings" name="dwttm_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="dwttm/dwttm.cfg">
<input type="hidden" id="dwttm-cmd" name="#command" value="/usr/local/emhttp/plugins/dwttm/scripts/none">

    <dl>
        <dt><strong>Start TTM Service:</strong></dt>
        <dd>
            <select id="SERVICE" name="SERVICE" size="1">
                <?=mk_option($dwttm_service, "disable", "No");?>
                <?=mk_option($dwttm_service, "enable", "Yes");?>
            </select>
        </dd>
    </dl>

    <blockquote class="inline_help">
        <p>Set to <strong><em>Yes</em></strong> to enable TTM and start the service, set to <strong><em>No</em></strong> to disable TTM and stop the service.</p>
        <p>The setting <strong><em>Yes</em></strong> will also enable TTM services to start automatically on UNRAID boot.</p>
    </blockquote>

    <dl>
        <dt>
            <input type="submit" name="#default" value="Default">
        </dt>
        <dd>
            <input type="submit" name="#apply" value="Apply">
            <input type="button" value="Done" onclick="done()">
        </dd>
    </dl>
</form>

<script>
const term = new Terminal({ scrollback: 0 });
const fitAddon = new FitAddon.FitAddon();

let ws;
let disposable;

function cleanup() {
    if (ws) {
        ws.close();
        ws = null;
    }

    if (disposable) {
        disposable.dispose();
        disposable = null;
    }
}

function fetchSessions() {
    $.getJSON('/plugins/dwttm/include/dwttm_sessions.php', function (data) {
        if (data.success) {
            let sessions = data.response;

            sessions.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const $sessionListContainer = $('#session-list-container');
            $sessionListContainer.empty();

            const $newSessionItem = $('<div>')
                .addClass('session-item add-new')
                .on('click', function () {
                    createNewSession();
                });

            const $plusIcon = $('<div>')
                .addClass('plus-icon')
                .html('<i class="fa fa-plus"></i>');

            const $newSessionText = $('<div>')
                .addClass('add-new-text')
                .text('Add New Session');

            $newSessionItem.append($plusIcon).append($newSessionText);
            $sessionListContainer.append($newSessionItem);

            $.each(sessions, function (index, session) {
                const sessionName = session.session_name;
                const sessionPreview = session.preview;
                const createdAt = session.created_at;

                const $sessionItem = $('<div>').addClass('session-item');

                const $link = $('<a>')
                    .addClass('session-link')
                    .text(`${sessionName}`)
                    .on('click', function () {
                        connectToSession(sessionName);
                        return false;
                    });

                $sessionItem.append($link);

                const $trashIcon = $('<div>')
                    .addClass('trash-icon')
                    .html('<i class="fa fa-trash"></i>')
                    .on('click', function (e) {
                        e.stopPropagation(); // Prevent triggering the session link click
                        closeSession(sessionName);
                    });

                $sessionItem.append($trashIcon);

                const $popupIcon = $('<div>')
                    .addClass('popup-icon')
                    .html('<i class="fa fa-window-restore"></i>')
                    .on('click', function (e) {
                        e.stopPropagation(); // Prevent triggering the session link click
                        popupSession(sessionName);
                    });

                $sessionItem.append($popupIcon);

                if (session.preview_success) {
                    const canvasWidth = 300;
                    const canvasHeight = 150;
                    const $canvas = $('<canvas>')
                        .attr('width', canvasWidth)
                        .attr('height', canvasHeight)
                        .css('cursor', 'pointer')
                        .on('click', function () {
                            connectToSession(sessionName);
                        });

                    const canvas = $canvas[0];
                    const ctx = canvas.getContext('2d');

                    ctx.fillStyle = '#000000';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);

                    let fontSize = 12;
                    const padding = 10;
                    const lineHeightFactor = 1.2;
                    let lineHeight = fontSize * lineHeightFactor;

                    const lines = sessionPreview.split('\n');
                    const totalLines = lines.length;

                    const maxContentHeight = totalLines * lineHeight;
                    const scalingFactor = Math.min(1, (canvasHeight - 2 * padding) / maxContentHeight);

                    fontSize = Math.floor(fontSize * scalingFactor);
                    lineHeight = fontSize * lineHeightFactor;

                    ctx.font = `${fontSize}px monospace`;
                    ctx.fillStyle = '#ffffff';

                    lines.forEach((line, index) => {
                        const y = padding + (index + 1) * lineHeight;
                        if (y <= canvasHeight - padding) {
                            ctx.fillText(line, padding, y);
                        }
                    });

                    $sessionItem.append($canvas);
                } else {
                    const $fallbackText = $('<div>')
                        .addClass('fallback-text')
                        .text("No preview available for this session.")
                        .on('click', function () { 
                            connectToSession(sessionName);
                        })
                        .css('cursor', 'pointer');

                    $sessionItem.append($fallbackText);
                }
                $sessionListContainer.append($sessionItem);
            });
        } else {
            console.error('Failed to fetch sessions:', data.message);
        }
    }).fail(function (xhr, status, error) {
        console.error('Error fetching sessions:', error);
    });
    clearTimeout(timers.fetchSessions);
    timers.fetchSessions = setTimeout(fetchSessions, 3000);
}

function closeSession(sessionName) {
    console.log(`Closing session: ${sessionName}`);
    $.post('/plugins/dwttm/include/close_session.php', { session_name: sessionName }, function (response) {
        if (response.success) {
            console.log(`Session ${sessionName} closed successfully.`);
            fetchSessions();
        } else {
            console.error(`Failed to close session ${sessionName}:`, response.message);
        }
    });
}

function createNewSession() {
    console.log('Creating a new terminal session...');
    $.post('/plugins/dwttm/include/create_session.php', function (response) {
        if (response.success) {
            console.log('New session created:', response.session_name);
            fetchSessions();
        } else {
            console.error('Failed to create new session:', response.message);
        }
    });
}

function connectToSession(session) {
    cleanup();

    const wsUrl = `ws://${window.location.hostname}:3000/ws?session=${session}`;
    ws = new WebSocket(wsUrl);

    $('.session-item').removeClass('connected');

    $('.session-item').filter(function () {
        return $(this).find('.session-link').text().trim() === session;
    }).addClass('connected');

    ws.onopen = () => {
        console.log(`Connected to TMUX session: ${session}`);
        term.clear();
    };

    ws.onmessage = (event) => {
        term.write(event.data);
    };

    ws.onerror = (error) => {
        console.error('WebSocket error:', error);
    };

    ws.onclose = () => {
        console.log(`Disconnected from TMUX session: ${session}`);
        term.write('\r\n*** Disconnected from session ***\r\n');
    };

    disposable = term.onData(data => {
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(data);
        }
    });

    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

function checkTTMsettings() {
    if ($('#SERVICE').val() === 'enable')
        $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/start');
    else
        $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/stop');

    if ("<?=$dwttm_running;?>" == 1){
        $('.dwttm-run').prop('disabled', true);
    }else{
        $('.dwttm-run').prop('disabled', false);
    }
}

$(function() {
    showStatus('ttmd');

    checkTTMsettings();
    $('#SERVICE').change(checkTTMsettings);

    <?if($dwttm_running):?>
        const terminalContainer = document.getElementById('terminal-container');

        term.loadAddon(fitAddon);
        term.open(terminalContainer);
        fitAddon.fit();

        term.write("\r\n");
        term.write("   ______   ______   __    __    \r\n");
        term.write("  /\\__  _\\ /\\__  _\\ /\\ \"-./  \\   \r\n");
        term.write("  \\/_/\\ \\/ \\/_/\\ \\/ \\ \\ \\-./\\ \\  \r\n");
        term.write("     \\ \\_\\    \\ \\_\\  \\ \\_\\ \\ \\_\\ \r\n");
        term.write("      \\/_/     \\/_/   \\/_/  \\/_/ \r\n");
        term.write("                                 \r\n");
        term.write("  Waiting for you to pick a session...\r\n\r\n");
        term.write("  ");

        fetchSessions();
    <?endif;?>
    
    if ( typeof caPluginUpdateCheck === "function" ) {
        caPluginUpdateCheck("dwttm.plg",{name:"TTerminal Manager (TTM)"});
    }
});
</script>
