Menu="Utilities"
Type="xmenu"
Title="Tmux Manager (TTM)"
Icon="tty"
Tag="tty"
Markdown="false"
---
<?
/* Copyright Derek Macias (parts of code from NUT package)
 * Copyright macester (parts of code from NUT package)
 * Copyright gfjardim (parts of code from NUT package)
 * Copyright SimonF (parts of code from NUT package)
 * Copyright Dan Landon (parts of code from Web GUI)
 * Copyright Bergware International (parts of code from Web GUI)
 * Copyright Lime Technology (any and all other parts of Unraid)
 *
 * Copyright desertwitch (as author and maintainer of this file)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 */
require_once '/usr/local/emhttp/plugins/dwttm/include/dwttm_config.php';
$theme = ($display["theme"] == 'white' || $display["theme"] == 'azure') ? 'light' : 'dark';

if($dwttm_running && !$dwttm_tmux_functional) {
    @shell_exec("/etc/rc.d/rc.ttmd stop &>/dev/null");
    $dwttm_running = false;
}
?>

<script src="<?=autov('/plugins/dwttm/js/jquery.mask.min.js');?>"></script>
<script src="<?=autov('/plugins/dwttm/js/xterm.js');?>"></script>
<script src="<?=autov('/plugins/dwttm/js/addon-fit.js');?>"></script>

<link type="text/css" rel="stylesheet" href="<?=autov('/plugins/dwttm/css/xterm.css');?>">
<link type="text/css" rel="stylesheet" href="<?=autov("/plugins/dwttm/css/dwttm-{$theme}.css");?>">

<?if($dwttm_running):?>
<table class="tablesorter shift dwttm-termtable">
<thead>
    <tr>
        <th>
            <strong><em>TTerminal</em></strong>
            <span style="float:right;text-transform:none;">
                <span id="dwttm-mouse-start-message" style="margin-right:5px;"><strong><em>You can close this page and come back to your terminals at any later time.</em></strong></span>
                <span id="dwttm-mouse-button-info" style="display:none;margin-right:5px;"><em>Scrolling Mode:</em></span>
                <i id="dwttm-mouse-button" class="fa fa-mouse-pointer" style="display:none;"></i>
            </span>
        </th>
    </tr>
</thead>
<tbody>
    <tr>
        <td id="dwttm-terminal-content">
            <div id="dwttm-terminal-container"></div>
            <div id="dwttm-modal-overlay">
                <div class="dwttm-modal">
                    <span class="dwttm-modal-new" onclick="newDcModal()">New Session</span>
                    <span class="dwttm-modal-close" onclick="closeDcModal()">Close Message</span>
                    <h2>Your session has been disconnected.</h2>
                    <p>
                        You can start a new one or close this message to inspect why this happened.
                    </p>
                </div>
            </div>
        </td>
    </tr>
</tbody>
</table>


<table class="tablesorter">
<thead>
    <tr>
        <th>
            <strong><em>TTerminal Sessions</em></strong>
            <span style="float:right;text-transform:none;">
                <em>Hover over and tap on any session name to rename it.</em>
            </span>
        </th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>
            <div id="dwttm-session-list-container">
                <ul></ul>
            </div>
        </td>
    </tr>
</tbody>
</table>

<br><br><hr><br>
<?endif;?>

<?if (!$dwttm_tmux_functional):?>
<div class="dwttm-tmux-message dwttm-tmux-red-text">
    <strong>Failure: The Tmux installation on your system is either not available or not functional.</strong><br>
    Please remove any custom Tmux installations and either reboot the system or reinstall the plugin.<br>
    The plugin will then automatically install a functional Tmux installation that is tailored to your OS version.
</div><br>
<?endif;?>

<?if ($dwttm_tmux_custom):?>
<div class="dwttm-tmux-message dwttm-tmux-gray-text">
    A custom Tmux installation was detected on your server, so the plugin did not install its own over it.<br>
    If you are running into unexpected behavior, consider removing the custom Tmux installation from your system.<br>
    After a plugin reinstall or reboot, a functional Tmux installation (that is tailored to your OS version) will be reinstalled.
</div><br>
<?endif;?>

<div>
    <span class="left" style="font-size:1.1rem;letter-spacing:1px;padding-left:5px;"><strong><i class="icon fa fa-cogs"></i>GENERAL SETTINGS</strong></span>
</div><br>

<form markdown="0" id="dwttm-settings" name="dwttm_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="dwttm/dwttm.cfg">
<input type="hidden" id="dwttm-cmd" name="#command" value="/usr/local/emhttp/plugins/dwttm/scripts/none">

    <dl>
        <dt>Tmux Backend Available:</dt>
        <dd><strong><?=($dwttm_tmux_available ? "Yes ($dwttm_tmux_version)" : "No ($dwttm_tmux_version)")?></strong></dd>
    </dl>

    <dl>
        <dt>Tmux Backend Package:</dt>
        <dd><strong><?=$dwttm_tmux_package;?></strong></dd>
    </dl>

    <div id="TTMsettings" style="<?=($dwttm_tmux_functional ? '' : 'display:none;')?>">
        <dl>
            <dt><strong>Start TTM Service:</strong></dt>
            <dd>
                <select id="SERVICE" name="SERVICE" size="1">
                    <?=mk_option($dwttm_service, "disable", "No");?>
                    <?=mk_option($dwttm_service, "enable", "Yes");?>
                </select>
                <?if(file_exists("/var/log/ttmd.log")):?>
                <a onclick="openTerminal('log','ttmd','ttmd.log')" style="color:inherit;margin-left:5px;cursor:help;">
                    <i class="fa fa-book dwttm-tooltip" title="TTM Service Logs"></i>
                </a>
                <?endif;?>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Set to <strong><em>Yes</em></strong> to enable TTM and start the service, set to <strong><em>No</em></strong> to disable TTM and stop the service.</p>
            <p>The setting <strong><em>Yes</em></strong> will also enable TTM service to start automatically on UNRAID boot.</p>
        </blockquote>

        <dl>
            <dt>TTM Service Port:</dt>
            <dd>
                <input name="SERVICEPORT" type="text" class="narrow dwttm-not-run dwttm-numeric" value="<?=$dwttm_service_port?>">
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets the port that the TTM service uses to facilitate the terminal connections.</p>
            <p>In <strong>Default</strong> routing mode, the service port is only accessible from 127.0.0.1 (as it is internally routed).</p>
        </blockquote>

        <dl>
            <dt>TTM Service Port Security:</dt>
            <dd>
                <select id="SERVICESEC" name="SERVICESEC" class="dwttm-not-run" size="1">
                    <?=mk_option($dwttm_service_security, "csrf", "Token-based (CSRF)");?>
                    <?=mk_option($dwttm_service_security, "disable", "None");?>
                </select>
                <span style="margin-left:5px;cursor:help;"><i class="fa fa-exclamation-triangle dwttm-tooltip" title="Keep this setting on Token-based, unless frequently running into token problems."></i></span>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets the security mechanism to prevent unauthorized connections to the TTM service port.</p>
            <p>In <strong>Default</strong> routing mode, the service port is only accessible from 127.0.0.1 (as it is internally routed).</p>
        </blockquote>

        <dl>
            <dt>TTM Service Routing Mode:</dt>
            <dd>
                <select id="SERVICEROUTE" name="SERVICEROUTE" class="dwttm-not-run" size="1">
                    <?=mk_option($dwttm_service_route, "route", "Default (with Unraid OS)");?>
                    <?=mk_option($dwttm_service_route, "direct", "Fallback (Unsafe/no SSL)");?>
                </select>
                <span style="margin-left:5px;cursor:help;"><i class="fa fa-exclamation-triangle dwttm-tooltip" title="Keep this setting on default, unless having fully understood the help description text."></i></span>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets the routing mode that the TTM frontend should use to access the TTM backend service.</p>
            <p><strong>Default</strong> relies on the Unraid web service to internally route any connections to the TTM service.</p>
            <p><strong>Fallback</strong> uses direct (non-SSL) connections to the configured port that the TTM service is listening on.</p>
            <p>In <strong>Default</strong> mode, the <strong>service port</strong> is <strong>closed to all external connections</strong> and all communication is done internally.</p>
            <p>In <strong>Fallback</strong> mode, it <strong>depends on you</strong> to <strong>ensure that the service port is not accessible</strong> from outside your local network.</p>
            <p>SSL connections are not supported in <strong>Fallback</strong> mode and this mode is not recommended outside secure local environments.</p>
        </blockquote>

        <dl>
            <dt>TTM Plugin Usage Metric Functions:</dt>
            <dd>
                <select class="dwttm-not-run" name="METRICSAPI" size="1">
                    <?=mk_option($dwttm_metricsapi, 'disable', 'No');?>
                    <?=mk_option($dwttm_metricsapi, 'enable', 'Yes');?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Enables collection of <strong>anonymized</strong> plugin usage statistics through the plugin usage metrics API.</p>
            <p>This aids prioritization of bug reports, development of new features and planning for plugin updates/deprecation.</p>
            <p><em>Attributes: Metric ID, Plugin Version, Unraid Version, Tmux Backend Version, TTM Service Active (Yes/No).</em></p>
            <p><strong><i class="fa fa-heart" style="color:red;"></i> If possible, please keep this setting <u>enabled</u> to support the continued development of this plugin - thank you!</strong></p>
        </blockquote>

        <dl>
            <dt>Optimize Tmux for Manual Command-Line:</dt>
            <dd>
                <select class="dwttm-not-run" id="OSCONFIGURE" name="OSCONFIGURE" size="1">
                    <?=mk_option($dwttm_os_configure, "disable", "No");?>
                    <?=mk_option($dwttm_os_configure, "enable", "Yes");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets if the plugin should optimize the Tmux defaults for manual command-line use as well.</p>
            <p>This involves setting the default terminal to <strong>xterm-256color</strong> instead of the non-supported default <strong>tmux-256color</strong>.</p>
            <p>The plugin always does this for its own sessions, this is only for manual Tmux commands you run in the command-line.</p>
        </blockquote>

        <dl>
            <dt><strong>Kill Array/Pool-Accessing Sessions with Array:</strong></dt>
            <dd>
                <select id="ARRAYDOWN" name="ARRAYDOWN" size="1">
                    <?=mk_option($dwttm_array_down, "disable", "No");?>
                    <?=mk_option($dwttm_array_down, "ttmacc", "Accessing TTM Sessions");?>
                    <?=mk_option($dwttm_array_down, "allacc", "All Accessing Sessions");?>
                    <?=mk_option($dwttm_array_down, "ttm", "TTM incl. Non-Accessing");?>
                    <?=mk_option($dwttm_array_down, "all", "All incl. Non-Accessing");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets if Tmux/TTM sessions accessing the array/pools (or not) should be killed when the array is stopping.</p>
            <p><strong>TTM</strong> refers to Tmux sessions created with TTM, <strong>All</strong> refers to Tmux sessions created both with TTM and other means.</p>
            <p><strong>Caution: Please note that this does not ensure a graceful exit of the programs that are running inside such sessions.</strong></p>
        </blockquote>

        <div>
            <span class="left" style="font-size:1.1rem;letter-spacing:1px;padding-left:5px;"><strong><i class="icon fa fa-cogs"></i>DISPLAY AND FUNCTION SETTINGS</strong></span>
        </div><br>

        <dl>
            <dt>Show TTM Button in OS Menu:</dt>
            <dd>
                <select id="OSBUTTON" name="OSBUTTON" size="1">
                    <?=mk_option($dwttm_os_button, "disable", "No");?>
                    <?=mk_option($dwttm_os_button, "enable", "Yes");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Shows the TTM button in the OS menu for faster access to the TTM terminals.</p>
        </blockquote>

        <?if(version_compare(parse_ini_file('/etc/unraid-version')['version'],'6.12.0-beta5', '>')):?>
        <dl>
            <dt>Show TTM on Unraid Dashboard:</dt>
            <dd>
                <select id="OSDASHBOARD" name="OSDASHBOARD" size="1">
                    <?=mk_option($dwttm_os_dashboard, "disable", "No");?>
                    <?=mk_option($dwttm_os_dashboard, "enable", "Yes");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Shows TTM on the Unraid dashboard for faster overview and access to the TTM terminals.</p>
        </blockquote>
        <?endif;?>

        <dl>
            <dt>General - Close Session Button Behavior:</dt>
            <dd>
                <select id="CLOSEBUTTON" name="CLOSEBUTTON" size="1">
                    <?=mk_option($dwttm_close_button, "confirm", "Ask Confirmation");?>
                    <?=mk_option($dwttm_close_button, "noconfirm", "No Confirmations");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets if you want to be asked for confirmation when closing sessions.</p>
            <p>Beware that closing a session <strong>also kills the running programs inside</strong> that session.</p>
        </blockquote>

        <dl>
            <dt>Page - New Session Button Behavior:</dt>
            <dd>
                <select id="PLUSBUTTONSETT" name="PLUSBUTTONSETT" size="1">
                    <?=mk_option($dwttm_plus_button, "quick", "New Quick Session");?>
                    <?=mk_option($dwttm_plus_button, "named", "New Named Session");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets if you want to be asked for a session name when pressing the respective button.</p>
        </blockquote>

        <dl>
            <dt>Window - New Session Button Behavior:</dt>
            <dd>
                <select id="PLUSBUTTONPOP" name="PLUSBUTTONPOP" size="1">
                    <?=mk_option($dwttm_plus_button_pop, "quick", "New Quick Session");?>
                    <?=mk_option($dwttm_plus_button_pop, "named", "New Named Session");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets if you want to be asked for a session name when pressing the respective button.</p>
        </blockquote>
    </div>

    <dl>
        <dt>
            <input type="button" class="dwttm-run" id="KILLSESSIONS" value="Kill All Sessions">
            <input type="submit" class="dwttm-not-run" name="#default" value="Restore Defaults">
        </dt>
        <dd>
            <input type="submit" name="#apply" value="Apply">
            <input type="button" class="dwttm-run" id="RESTART" value="Restart Service">
        </dd>
    </dl>
</form>

<div>
    <span class="left" style="font-size:1.1rem;letter-spacing:1px;padding-left:5px;"><strong><i class="icon fa fa-trophy"></i>CREDITS AND ACKNOWLEDGEMENTS</strong></span>
</div><br>

<div style="font-family:monospace;padding-left:5px;">
    <p>This plugin would not have been possible without the guidance of my friend <strong>jcofer555</strong>.</p>
</div><br>

<script>
const term = new Terminal({ scrollback: 0 });
const fitAddon = new FitAddon.FitAddon();

let ws;
let disposable;
let disposable2;
let connectedSessionId;

function freeSession() {
    if (ws) {
        ws.onopen = null;
        ws.onmessage = null;
        ws.onerror = null;
        ws.onclose = null;
        ws.close();
        ws = null;
    }

    if (disposable) {
        disposable.dispose();
        disposable = null;
    }

    if (disposable2) {
        disposable2.dispose();
        disposable2 = null;
    }

    if (connectedSessionId) {
        connectedSessionId = null;
    }
}

function newDcModal() {
    $('#dwttm-modal-overlay').hide();
    <?php if ($dwttm_plus_button === "named"): ?>
    if (typeof swal === "function") {
        swal({
            title: "New Session",
            text: "Please choose a name for your new session (or leave empty):",
            type: "input",
            showCancelButton: true,
            confirmButtonText: "Create Session",
            html: true,
            inputPlaceholder: "Alphanumeric - no spaces or special characters!",
            closeOnConfirm: false
            },
            function(value){
                if(value === false) {
                    swal.close();
                    return;
                }
                if(value.trim() !== "") {
                    if(!/^[A-Za-z0-9\-]+$/.test(value.trim())) {
                        swal("Error", "The chosen session name contained disallowed characters.", "error");
                    }
                    else {
                        swal.close();
                        setTimeout(function() {
                            createNewNamedSession(value.trim());
                        }, 1000);
                    }
                } else {
                    swal.close();
                    setTimeout(function() {
                        createNewSession();
                    }, 1000);
                }
            });
    } else {
        var value = prompt("Please choose a name for your new session (or leave empty):\nAlphanumeric - no spaces or special characters!");

        if (value === null) {
            return;
        }

        if (value.trim() !== "") {
            if (!/^[A-Za-z0-9\-]+$/.test(value.trim())) {
                alert("Error: The chosen session name contained disallowed characters.");
            } else {
                createNewNamedSession(value.trim());
            }
        } else {
            createNewSession();
        }
    }
    <?php else: ?>
    createNewSession();
    <?php endif; ?>
}

function closeDcModal() {
    $('#dwttm-modal-overlay').hide();
}

function KillSessions() {
    if (typeof swal === "function") {
        swal({
            title: "!!! DANGER !!!",
            text: "This will terminate all sessions and running programs inside.<br>Are you really sure that you want to do this?",
            type: "error",
            html: true,
            confirmButtonText: "Terminate Sessions",
            showCancelButton: true
        }, function() {
            $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/killsessions');
            $('#dwttm-settings').submit();
        });
    } else {
        if (confirm("--- DANGER --- DANGER --- DANGER ---\n\nThis will terminate all sessions and running programs inside.\n\nAre you sure that you want to do this?")) {
            $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/killsessions');
            $('#dwttm-settings').submit();
        }
    }
}

function fetchSessions(manuallyInvoked) {
    if(!manuallyInvoked) {
        clearTimeout(timers.fetchSessions);
    }
    $.getJSON('/plugins/dwttm/include/dwttm_sessions.php', function (data) {
        if (data.response) {
            let sessions = data.response;

            sessions.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const $sessionListContainer = $('#dwttm-session-list-container');
            $sessionListContainer.empty();

            const $newSessionItem = $('<div>')
                .addClass('dwttm-session-item dwttm-add-new')
                .on('click', function (e) {
                    e.stopPropagation();
                    <?php if ($dwttm_plus_button === "named"): ?>
                    if (typeof swal === "function") {
                        swal({
                            title: "New Session",
                            text: "Please choose a name for your new session (or leave empty):",
                            type: "input",
                            showCancelButton: true,
                            confirmButtonText: "Create Session",
                            html: true,
                            inputPlaceholder: "Alphanumeric - no spaces or special characters!",
                            closeOnConfirm: false
                            },
                            function(value){
                                if(value === false) {
                                    swal.close();
                                    return;
                                }
                                if(value.trim() !== "") {
                                    if(!/^[A-Za-z0-9\-]+$/.test(value.trim())) {
                                        swal("Error", "The chosen session name contained disallowed characters.", "error");
                                    }
                                    else {
                                        swal.close();
                                        setTimeout(function() {
                                            createNewNamedSession(value.trim());
                                        }, 1000);
                                    }
                                } else {
                                    swal.close();
                                    setTimeout(function() {
                                        createNewSession();
                                    }, 1000);
                                }
                            });
                    } else {
                        var value = prompt("Please choose a name for your new session (or leave empty):\nAlphanumeric - no spaces or special characters!");

                        if (value === null) {
                            return;
                        }

                        if (value.trim() !== "") {
                            if (!/^[A-Za-z0-9\-]+$/.test(value.trim())) {
                                alert("Error: The chosen session name contained disallowed characters.");
                            } else {
                                createNewNamedSession(value.trim());
                            }
                        } else {
                            createNewSession();
                        }
                    }
                    <?php else: ?>
                    createNewSession();
                    <?php endif; ?>
                });

            const $plusIcon = $('<div>')
                .addClass('dwttm-plus-icon')
                .html('<i class="fa fa-plus"></i>');

            const $newSessionText = $('<div>')
                .addClass('dwttm-add-new-text')
                .text('Add New Session');

            $newSessionItem.append($plusIcon).append($newSessionText);
            $sessionListContainer.append($newSessionItem);

            $.each(sessions, function (index, session) {
                const sessionId = session.session_id;
                const sessionName = session.session_name;
                const sessionPreview = session.preview;
                const createdAt = session.created_at;

                const $sessionItem = $('<div>')
                    .addClass('dwttm-session-item')
                    .on('click', function (e) {
                        e.stopPropagation();
                        connectToSession(sessionId);
                    });

                $sessionItem.attr('data-session-id', sessionId);

                if(sessionId === connectedSessionId) {
                    $sessionItem.addClass('dwttm-connected');
                }

                const $infoHead = $('<div>')
                    .addClass('dwttm-info-header')
                    .text(sessionName)
                    .on('click', function (e) {
                        e.stopPropagation();
                        if (typeof swal === "function") {
                            swal({
                                title: "Session: " + sessionName,
                                text: "Please choose a new name for the session.",
                                type: "input",
                                showCancelButton: true,
                                confirmButtonText: "Rename Session",
                                html: true,
                                inputPlaceholder: "Alphanumeric - no spaces or special characters!",
                                closeOnConfirm: false
                                },
                                function(value){
                                    if(value !== false && value.trim() !== "") {
                                        if(!/^[A-Za-z0-9\-]+$/.test(value.trim())) {
                                            swal("Error", "The chosen session name contained disallowed characters.", "error");
                                        }
                                        else {
                                            swal.close();
                                            setTimeout(function() {
                                                renameSession(sessionId, value.trim());
                                            }, 1000);
                                        }
                                    } else {
                                        swal.close();
                                    }
                            });
                        } else {
                            var value = prompt("Session: " + sessionName + "\nPlease choose a new name for the session.\nAlphanumeric - no spaces or special characters!");

                            if (value === null) {
                                return;
                            }

                            if (value.trim() !== "") {
                                if (!/^[A-Za-z0-9\-]+$/.test(value.trim())) {
                                    alert("Error: The chosen session name contained disallowed characters.");
                                } else {
                                    renameSession(sessionId, value.trim());
                                }
                            } else {
                                return;
                            }
                        }
                    });

                $sessionItem.append($infoHead);

                const $trashIcon = $('<div>')
                    .addClass('dwttm-trash-icon')
                    .html('<i class="fa fa-trash"></i>')
                    .on('click', function (e) {
                        e.stopPropagation();
                        <?php if ($dwttm_close_button !== "noconfirm"): ?>
                        if (typeof swal === "function") {
                            swal({
                                title: "Session: " + sessionName,
                                text: "Terminate the session and its running programs?",
                                type: "warning",
                                html: true,
                                confirmButtonText: "Terminate Session",
                                showCancelButton: true
                            }, function() {
                                closeSession(sessionId);
                            });
                        } else {
                            if (confirm("Session: " + sessionName + "\n\nTerminate the session and its running programs?")) {
                                closeSession(sessionId);
                            }
                        }
                        <?php else: ?>
                        closeSession(sessionId);
                        <?php endif; ?>
                    });

                $sessionItem.append($trashIcon);

                const $popupIcon = $('<div>')
                    .addClass('dwttm-popup-icon')
                    .html('<i class="fa fa-window-restore"></i>')
                    .on('click', function (e) {
                        e.stopPropagation();
                        popupSession(sessionId);
                    });

                $sessionItem.append($popupIcon);

                if (session.preview_success) {
                    let $canvas;
                    try {
                        const canvasWidth = 300;
                        const canvasHeight = 150;
                        $canvas = $('<canvas>')
                            .attr('width', canvasWidth)
                            .attr('height', canvasHeight);

                        const canvas = $canvas[0];
                        const ctx = canvas.getContext('2d');

                        ctx.fillStyle = '#000000';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);

                        let fontSize = 12;
                        const padding = 10;
                        const lineHeightFactor = 1.2;
                        let lineHeight = fontSize * lineHeightFactor;

                        const lines = sessionPreview.split('\n');
                        const totalLines = lines.length;

                        const maxContentHeight = totalLines * lineHeight;
                        const scalingFactor = Math.min(1, (canvasHeight - 2 * padding) / maxContentHeight);

                        fontSize = Math.floor(fontSize * scalingFactor);
                        lineHeight = fontSize * lineHeightFactor;

                        ctx.font = `${fontSize}px monospace`;
                        ctx.fillStyle = '#ffffff';

                        lines.forEach((line, index) => {
                            const y = padding + (index + 1) * lineHeight;
                            if (y <= canvasHeight - padding) {
                                ctx.fillText(line, padding, y);
                            }
                        });
                    } catch(e) {
                        $canvas = null;
                        $canvas = $('<div>')
                        .addClass('dwttm-fallback-text')
                        .text("No preview available for this session.");
                    } finally {
                        $sessionItem.append($canvas);
                    }
                } else {
                    const $fallbackText = $('<div>')
                        .addClass('dwttm-fallback-text')
                        .text("No preview available for this session.");

                    $sessionItem.append($fallbackText);
                }

                const $infoFooter = $('<div>')
                    .addClass('dwttm-info-footer')
                    .text(`${session.created_at}`);
                $sessionItem.append($infoFooter);

                $sessionListContainer.append($sessionItem);
            });
        } else {
            if (data.error) {
                console.error('Error processing sessions:', data.error)
            } else {
                console.error('Error processing sessions, no error message.');
            }
        }
    }).fail(function (xhr, status, error) {
        console.error('Error fetching sessions:', error);
    }).always(function() {
        if(!manuallyInvoked) {
            timers.fetchSessions = setTimeout(fetchSessions, 3000);
        }
    });
}

function createNewSession() {
    $.getJSON('/plugins/dwttm/include/dwttm_new_session.php', function (response) {
        if (response.success && response.session_id) {
            fetchSessions(true);
            connectToSession(response.session_id);
        } else {
            if(response.error) {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed to create a new session:<br><pre>" + response.error + "</pre>Further details may be found in the system log, where applicable.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert(`Failed to create a new session: ${response.error}`);
                }
                console.error('Error while creating session:', response.error);
            } else {
                if (typeof swal === "function") {
                    swal("Error", "Failed to create a new session, please try again.", "error");
                } else {
                    alert('Failed to create a new session, please try again.');
                }
                console.error('Error while creating session, no error message.');
            }
        }
    }).fail(function (xhr, status, error) {
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed to create a new session:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed to create a new session: ${error}`);
        }
        console.error('Failed to create a new session:', error);
    });
}

function createNewNamedSession(sessionName) {
    $.getJSON('/plugins/dwttm/include/dwttm_new_session.php', { session: sessionName }, function (response) {
        if (response.success && response.session_id) {
            fetchSessions(true);
            connectToSession(response.session_id);
        } else {
            if(response.error) {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed to create a new session:<br><pre>" + response.error + "</pre>Further details may be found in the system log, where applicable.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert(`Failed to create a new session: ${response.error}`);
                }
                console.error('Error while creating session:', response.error);
            } else {
                if (typeof swal === "function") {
                    swal("Error", "Failed to create a new session, please try again.", "error");
                } else {
                    alert('Failed to create a new session, please try again.');
                }
                console.error('Error while creating session, no error message.');
            }
        }
    }).fail(function (xhr, status, error) {
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed to create a new session:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed to create a new session: ${error}`);
        }
        console.error('Failed to create a new session:', error);
    });
}

function closeSession(sessionId) {
    $.getJSON('/plugins/dwttm/include/dwttm_close_session.php', { session: sessionId }, function (response) {
        if (response.success) {
            fetchSessions(true);
        } else {
            if(response.error) {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed closing session:<br><pre>" + response.error + "</pre>Further details may be found in the system log, where applicable.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert(`Failed closing session: ${response.error}`);
                }
                console.error('Error while closing session:', response.error);
            } else {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed closing session, no error message.<br>Further details may be found in the system log, where applicable.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert(`Failed closing session, no error message.`);
                }
                console.error('Error while closing session, no error message.');
            }
        }
    }).fail(function (xhr, status, error) {
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed closing session:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed closing session: ${error}`);
        }
        console.error('Failed closing session:', error);
    });
}

function renameSession(sessionId, sessionName) {
    $.getJSON('/plugins/dwttm/include/dwttm_rename_session.php', { session: sessionId, sessionName: sessionName }, function (response) {
        if (response.success) {
            fetchSessions(true);
        } else {
            if(response.error) {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed renaming session:<br><pre>" + response.error + "</pre>Further details may be found in the system log, where applicable.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert(`Failed renaming session: ${response.error}`);
                }
                console.error('Error while renaming session:', response.error);
            } else {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed renaming session, no error message.<br>Further details may be found in the system log, where applicable.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert(`Failed renaming session, no error message.}`);
                }
                console.error('Error while renaming session, no error message.');
            }
        }
    }).fail(function (xhr, status, error) {
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed renaming session:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed renaming session: ${error}`);
        }
        console.error('Error renaming session:', error);
    });
}

function fetchSessionMouse(sessionId) {
    const $mouseButton = $('#dwttm-mouse-button');
    const $mouseButtonInfo = $('#dwttm-mouse-button-info');
    const $mouseButtonStart = $('#dwttm-mouse-start-message');
    $.getJSON('/plugins/dwttm/include/dwttm_mouse_session.php', { session: sessionId }, function (response) {
        if (response.mouse) {
            $mouseButton.off("click");
            $mouseButtonStart.hide();
            $mouseButton.show();
            $mouseButtonInfo.show();
            if(response.mouse === "on") {
                $mouseButton.on( "click", function() {
                    setSessionMouse(sessionId, "off");
                });
                $mouseButton.removeClass("dwttm-mouse-off");
                $mouseButton.addClass("dwttm-mouse-on");
            } else {
                $mouseButton.on( "click", function() {
                    setSessionMouse(sessionId, "on");
                });
                $mouseButton.removeClass("dwttm-mouse-on");
                $mouseButton.addClass("dwttm-mouse-off");
            }
        } else {
            $mouseButton.off("click");
            $mouseButton.hide();
            $mouseButtonInfo.hide();
            $mouseButtonStart.show();
            if(response.error) {
                console.error('Error while fetching mouse mode for session:', response.error);
            } else {
                console.error('Error while fetching mouse mode for session, no error message.');
            }
        }
    }).fail(function (xhr, status, error) {
        $mouseButton.off("click");
        $mouseButton.hide();
        $mouseButtonInfo.hide();
        $mouseButtonStart.show();
        console.error('Error fetching mouse mode for session:', error);
    });
}

function setSessionMouse(sessionId, requestedMouse) {
    const $mouseButton = $('#dwttm-mouse-button');
    $.getJSON('/plugins/dwttm/include/dwttm_mouse_session.php', { session: sessionId, mouse: requestedMouse }, function (response) {
        if(response.newmouse) {
            $mouseButton.off("click");
            if(response.newmouse === "on") {
                $mouseButton.on( "click", function() {
                    setSessionMouse(sessionId, "off");
                });
                $mouseButton.removeClass("dwttm-mouse-off");
                $mouseButton.addClass("dwttm-mouse-on");
            } else {
                $mouseButton.on( "click", function() {
                    setSessionMouse(sessionId, "on");
                });
                $mouseButton.removeClass("dwttm-mouse-on");
                $mouseButton.addClass("dwttm-mouse-off");
            }
            if(!response.requestmouse || !response.newmouse || response.requestmouse !== response.newmouse) {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed setting new mouse mode, please try again.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert("Failed setting new mouse mode, please try again.");
                }
            }
        } else {
            if(response.error) {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed setting mouse mode:<br><pre>" + response.error + "</pre>Further details may be found in the system log, where applicable.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert(`Failed setting mouse mode: ${response.error}`);
                }
                console.error('Error while setting mouse mode:', response.error);
            } else {
                if (typeof swal === "function") {
                    swal({
                        title: "Error",
                        text: "Failed setting mouse mode, no error message.<br>Further details may be found in the system log, where applicable.",
                        type: "error",
                        confirmButtonText: 'Close',
                        html: true
                    });
                } else {
                    alert(`Failed setting mouse mode, no error message.}`);
                }
                console.error('Error setting mouse mode, no error message.');
            }
        }
    }).fail(function (xhr, status, error) {
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed setting mouse mode:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed setting mouse mode: ${error}`);
        }
        console.error('Error setting mouse mode for session:', error);
    });
}

function popupSession(sessionId) {
    const width = Math.min(screen.availWidth, 1200);
    const height = Math.min(screen.availHeight, 800);

    let top = (screen.height - height) / 2;
    if (!top || top < 0) { top = 0; }
    let left = (screen.width - width) / 2;
    if (!left || left < 0) { left = 0; }

    if(sessionId) {
        const windowName = `ttm_sess_${sessionId}`;
        window.open(
            `/plugins/dwttm/tterminal.php?session=${encodeURIComponent(sessionId)}`,
            windowName,
            `width=${width},height=${height},top=${top},left=${left},resizable=no,scrollbars=no`
        );
    } else {
        const windowName = "ttm_rand_" + Math.random().toString(36).substr(2, 9);
        window.open(
            '/plugins/dwttm/tterminal.php',
            windowName,
            `width=${width},height=${height},top=${top},left=${left},resizable=no,scrollbars=no`
        );
    }
}

function handleSelectionChange() {
    if ("" !== term.getSelection()) {
        try {
            document.execCommand("copy");
        } catch (error) {
            console.error("Error copying text:", error);
            return;
        }
    }

    disposable2.dispose();
    term.clearSelection();
    disposable2 = term.onSelectionChange(handleSelectionChange);
}

function sendTerminalSize() {
    fitAddon.fit();
    const { cols, rows } = term;
    if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
            type: 'resize',
            cols,
            rows,
        }));
    }
}

function connectToSession(sessionId) {
    freeSession();

    const csrfToken = <?= json_encode($var['csrf_token']); ?>;
    const servicePort = <?= json_encode($dwttm_service_port); ?>;

    <?php if ($dwttm_service_route === "direct"): ?>
        const wsUrl = `ws://${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}:${servicePort}/?session=${encodeURIComponent(sessionId)}&csrf=${encodeURIComponent(csrfToken)}`;
    <?php else: ?>
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${wsProtocol}//${window.location.hostname}${window.location.port ? `:${window.location.port}` : ''}/wsproxy/${servicePort}/session/${encodeURIComponent(sessionId)}/csrf/${encodeURIComponent(csrfToken)}`;
    <?php endif; ?>

    ws = new WebSocket(wsUrl);

    ws.binaryType = "arraybuffer";

    ws.onopen = () => {
        term.clear();
        sendTerminalSize();
    };

    ws.onmessage = (event) => {
        term.write(new Uint8Array(event.data))
    };

    ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        if (ws.readyState !== WebSocket.OPEN) {
            term.write('\r\n*** Connection Error: Unable to connect to the requested session. ***\r\n');
            term.write('\r\nThis is can be caused by using TTM fallback routing mode in an SSL/VPN setting.\r\n');
            term.write('\r\nPlease check your browser console, change the TTM routing mode and/or restart TTM.\r\n');
        }
    };

    ws.onclose = () => {
        term.write('\r\n*** Disconnected from session ***\r\n');
        $('#dwttm-modal-overlay').css('display', 'flex');
        freeSession();
    };

    disposable = term.onData(data => {
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(data);
        }
    });
    disposable2 = term.onSelectionChange(handleSelectionChange);

    connectedSessionId = sessionId;

    $('.dwttm-session-item').removeClass('dwttm-connected');

    $('.dwttm-session-item').filter(function () {
        return $(this).attr('data-session-id') === sessionId;
    }).addClass('dwttm-connected');

    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });

    fetchSessionMouse(sessionId);
}

function checkTTMsettings() {
    if ($('#SERVICE').val() === 'enable')
        $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/start');
    else
        $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/stop');

    if ("<?=$dwttm_running;?>" == 1){
        $('.dwttm-not-run').prop('disabled', true);
        $('.dwttm-run').prop('disabled', false);
    }else{
        $('.dwttm-not-run').prop('disabled', false);
        $('.dwttm-run').prop('disabled', true);
    }
}

$(function() {
    showStatus('ttmd');

    checkTTMsettings();
    $('#SERVICE').change(checkTTMsettings);

    $('.dwttm-numeric').mask('XXXXXXX', {
        translation: {
            'X': {
                pattern: /[0-9]/, optional: true
            }
        }
    });

    $('#RESTART').click(function(){
        $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/restart');
        $('#dwttm-settings').submit();
    });

    $('#KILLSESSIONS').click(KillSessions);

    <?if($dwttm_running):?>
        const terminalContainer = document.getElementById('dwttm-terminal-container');

        term.loadAddon(fitAddon);
        term.open(terminalContainer);
        fitAddon.fit();

        term.write("\r\n\r\n\r\n\r\n");
        term.write("\t\t        ##########        \r\n");
        term.write("\t\t   ####################   \r\n");
        term.write("\t\t  ######          ######  \r\n");
        term.write("\t\t  ######          ######  \r\n");
        term.write("\t\t                          \r\n");
        term.write("\t\t  ###  ### -### ###  ###  \r\n");
        term.write("\t\t                          \r\n");
        term.write("\t\t    #### ###  ###  ###    \r\n");
        term.write("\t\t    ###. ###  ###  ###    \r\n");
        term.write("\r\n\t/ Tmux Terminal Manager (TTM) for UNRAID /\r\n\r\n");
        term.write("\x1b[3;38;2;200;200;200m\t\t Please scroll down and create or select a terminal...\r\n\r\n\x1b[0m");

        fetchSessions();
    <?endif;?>

    if(typeof $.fn.tooltipster === 'function') {
        $('.dwttm-tooltip').tooltipster({
            maxWidth: 300
        });
    }

    if ( typeof caPluginUpdateCheck === "function" ) {
        caPluginUpdateCheck("dwttm.plg",{name:"Tmux Terminal Manager (TTM)"});
    }
});
</script>
