Menu="Utilities"
Type="xmenu"
Title="TTerminal Manager (TTM)"
Icon="tty"
Tag="tty"
Markdown="false"
---
<?
/* Copyright Derek Macias (parts of code from NUT package)
 * Copyright macester (parts of code from NUT package)
 * Copyright gfjardim (parts of code from NUT package)
 * Copyright SimonF (parts of code from NUT package)
 * Copyright Dan Landon (parts of code from Web GUI)
 * Copyright Bergware International (parts of code from Web GUI)
 * Copyright Lime Technology (any and all other parts of Unraid)
 *
 * Copyright desertwitch (as author and maintainer of this file)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 */
require_once '/usr/local/emhttp/plugins/dwttm/include/dwttm_config.php';
$theme = ($display["theme"] == 'white' || $display["theme"] == 'azure') ? 'light' : 'dark';

if($dwttm_running && !$dwttm_tmux_functional) {
    @shell_exec("/etc/rc.d/rc.ttmd stop &>/dev/null");
    $dwttm_running = false;
}
?>

<script src="<?=autov('/plugins/dwttm/js/jquery.mask.min.js');?>"></script>
<script src="<?=autov('/plugins/dwttm/js/xterm.js');?>"></script>
<script src="<?=autov('/plugins/dwttm/js/addon-fit.js');?>"></script>

<link type="text/css" rel="stylesheet" href="<?=autov('/plugins/dwttm/css/xterm.css');?>">
<link type="text/css" rel="stylesheet" href="<?=autov("/plugins/dwttm/css/dwttm-{$theme}.css");?>">

<?if($dwttm_running):?>
<table class="tablesorter shift termtable">
<thead>
    <tr>
        <th>
            <strong>TTerminal</strong>
            <span style="float:right">
                <i id="mouse-button" class="fa fa-mouse-pointer" style="display:none"></i>
            </span>
        </th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>
            <div id="terminal-container"></div>
        </td>
    </tr>
</tbody>
</table>


<table class="tablesorter">
<thead>
    <tr>
        <th><strong>TTerminal Sessions</strong></th>
    </tr>
</thead>
<tbody>
    <tr>
        <td>
            <div id="session-list-container">
                <ul id="session-list"></ul>
            </div>
        </td>
    </tr>
</tbody>
</table>

<br><br><hr><br>
<?endif;?>

<?if (!$dwttm_tmux_functional):?>
<div class="tmux-message tmux-red-text">
    <strong>Failure: The Tmux installation on your system is either not available or not functional.</strong><br>
    Please remove any custom Tmux installations and either reboot the system or reinstall the plugin.<br>
    The plugin will then automatically install a functional Tmux installation that is tailored to your OS version.
</div><br>
<?endif;?>

<?if ($dwttm_tmux_custom):?>
<div class="tmux-message tmux-gray-text">
    A custom Tmux installation was detected on your server, so the plugin did not install its own over it.<br>
    If you are running into unexpected behavior, consider removing the custom Tmux installation from your system.<br>
    After a plugin reinstall or reboot, a functional Tmux installation (that is tailored to your OS version) will be reinstalled.
</div><br>
<?endif;?>

<div>
    <span class="left" style="font-size:1.1rem;letter-spacing:1px;padding-left:5px;"><strong><i class="icon fa fa-cogs"></i>GENERAL SETTINGS</strong></span>
</div><br>

<form markdown="0" id="dwttm-settings" name="dwttm_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="dwttm/dwttm.cfg">
<input type="hidden" id="dwttm-cmd" name="#command" value="/usr/local/emhttp/plugins/dwttm/scripts/none">

    <dl>
        <dt>Tmux Backend Available:</dt>
        <dd><strong><?=($dwttm_tmux_available ? "Yes ($dwttm_tmux_version)" : "No ($dwttm_tmux_version)")?></strong></dd>
    </dl>

    <dl>
        <dt>Tmux Backend Package:</dt>
        <dd><strong><?=$dwttm_tmux_package;?></strong></dd>
    </dl>

    <div id="TTMsettings" style="<?=($dwttm_tmux_functional ? '' : 'display:none;')?>">
        <dl>
            <dt><strong>Start TTM Service:</strong></dt>
            <dd>
                <select id="SERVICE" name="SERVICE" size="1">
                    <?=mk_option($dwttm_service, "disable", "No");?>
                    <?=mk_option($dwttm_service, "enable", "Yes");?>
                </select>
                <?if(file_exists("/var/log/ttmd.log")):?>
                <a onclick="openTerminal('log','ttmd','ttmd.log')" style="color:inherit;margin-left:5px;cursor:pointer;">
                    <i class="fa fa-book" title="TTM Service Logs"></i>
                </a>
                <?endif;?>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Set to <strong><em>Yes</em></strong> to enable TTM and start the service, set to <strong><em>No</em></strong> to disable TTM and stop the service.</p>
            <p>The setting <strong><em>Yes</em></strong> will also enable TTM service to start automatically on UNRAID boot.</p>
        </blockquote>

        <dl>
            <dt>TTM Service Port:</dt>
            <dd>
                <input name="SERVICEPORT" type="text" class="narrow dwttm-run dwttm-numeric" value="<?=$dwttm_service_port?>">
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets the port that the TTM service uses to facilitate the terminal connections.</p>
        </blockquote>

        <dl>
            <dt>TTM Service Port Security:</dt>
            <dd>
                <select id="SERVICESEC" name="SERVICESEC" class="dwttm-run" size="1">
                    <?=mk_option($dwttm_service_security, "csrf", "Token-based (CSRF)");?>
                    <?=mk_option($dwttm_service_security, "disable", "None");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets the security mechanism to prevent unauthorized connections to the TTM service port.</p>
        </blockquote>

        <dl>
            <dt>TTM Service Routing Mode:</dt>
            <dd>
                <select id="SERVICEROUTE" name="SERVICEROUTE" class="dwttm-run" size="1">
                    <?=mk_option($dwttm_service_route, "route", "Default (via Unraid OS)");?>
                    <?=mk_option($dwttm_service_route, "direct", "Direct (no SSL/VPN)");?>
                </select>
            </dd>
        </dl>

        <blockquote class="inline_help">
            <p>Sets the routing mode that the TTM frontend should use to access the TTM service.</p>
            <p><strong>Default</strong> relies on the Unraid web service to safely route any connections to the TTM service.</p>
            <p><strong>Direct</strong> uses direct, non-SSL connections to the configured port that the TTM service is listening on.</p>
            <p>Please note that the <strong>Direct</strong> mode does not support SSL and should only ever be used in secure local environments.</p>
        </blockquote>
    </div>

    <dl>
        <dt>
            <input type="submit" name="#default" value="Default">
        </dt>
        <dd>
            <input type="submit" name="#apply" value="Apply">
            <input type="button" value="Done" onclick="done()">
        </dd>
    </dl>
</form>

<script>
const term = new Terminal({ scrollback: 0 });
const fitAddon = new FitAddon.FitAddon();

let ws;
let disposable;
let disposable2;
let connectedSessionId;

function freeSession() {
// CHECKED - OK
    if (ws) {
        ws.onopen = null;
        ws.onmessage = null;
        ws.onerror = null;
        ws.onclose = null;
        ws.close();
        ws = null;
    }

    if (disposable) {
        disposable.dispose();
        disposable = null;
    }

    if (disposable2) {
        disposable2.dispose();
        disposable2 = null;
    }

    if (connectedSessionId) {
        connectedSessionId = null;
    }
}

function fetchSessions() {
// CHECKED - OK
    $.getJSON('/plugins/dwttm/include/dwttm_sessions.php', function (data) {
        if (data.response) {
            let sessions = data.response;

            sessions.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const $sessionListContainer = $('#session-list-container');
            $sessionListContainer.empty();

            const $newSessionItem = $('<div>')
                .addClass('session-item add-new')
                .on('click', function (e) {
                    e.stopPropagation();
                    if (typeof swal === "function") {
                        swal({
                            title: "New Session",
                            text: "Please choose a name for your new session (or leave empty):",
                            type: "input",
                            showCancelButton: true,
                            confirmButtonText: "Create Session",
                            html: true,
                            inputPlaceholder: "Alphanumeric - no spaces or special characters!",
                            closeOnConfirm: false
                            },
                            function(value){
                                if(value === false) {
                                    swal.close();
                                    return;
                                }
                                if(value !== "") {
                                    var format = /[ `!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
                                    if(format.test(value)) {
                                        swal("Error", "The chosen session name contained disallowed characters.", "error");
                                    }
                                    else {
                                        swal.close();
                                        setTimeout(function() {
                                            createNewNamedSession(value);
                                        }, 1000);
                                    }
                                } else {
                                    swal.close();
                                    setTimeout(function() {
                                        createNewSession();
                                    }, 1000);
                                }
                            });
                    } else {
                        var value = prompt("Please choose a name for your new session (or leave empty):\nAlphanumeric - no spaces or special characters!");

                        if (value === null) {
                            return;
                        }

                        if (value !== "") {
                            var format = /[ `!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
                            if (format.test(value)) {
                                alert("Error: The chosen session name contained disallowed characters.");
                            } else {
                                createNewNamedSession(value);
                            }
                        } else {
                            createNewSession();
                        }
                    }
                });

            const $plusIcon = $('<div>')
                .addClass('plus-icon')
                .html('<i class="fa fa-plus"></i>');

            const $newSessionText = $('<div>')
                .addClass('add-new-text')
                .text('Add New Session');

            $newSessionItem.append($plusIcon).append($newSessionText);
            $sessionListContainer.append($newSessionItem);

            $.each(sessions, function (index, session) {
                const sessionId = session.session_id;
                const sessionName = session.session_name;
                const sessionPreview = session.preview;
                const createdAt = session.created_at;

                const $sessionItem = $('<div>')
                    .addClass('session-item')
                    .on('click', function (e) {
                        e.stopPropagation();
                        connectToSession(sessionId);
                    });

                $sessionItem.attr('data-session-id', sessionId);

                if(sessionId === connectedSessionId) {
                    $sessionItem.addClass('connected');
                }

                const $infoHead = $('<div>')
                    .addClass('info-header')
                    .text(sessionName)
                    .on('click', function (e) {
                        e.stopPropagation();
                        if (typeof swal === "function") {
                            swal({
                                title: "Session: " + sessionName,
                                text: "Please choose a new name for the session.",
                                type: "input",
                                showCancelButton: true,
                                confirmButtonText: "Rename Session",
                                html: true,
                                inputPlaceholder: "Alphanumeric - no spaces or special characters!",
                                closeOnConfirm: false
                                },
                                function(value){
                                    if(value !== false && value !== "") {
                                        var format = /[ `!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
                                        if(format.test(value)) {
                                            swal("Error", "The chosen session name contained disallowed characters.", "error");
                                        }
                                        else {
                                            swal.close();
                                            setTimeout(function() {
                                                renameSession(sessionId, value);
                                            }, 1000);
                                        }
                                    } else {
                                        swal.close();
                                    }
                            });
                        } else {
                            var value = prompt("Session: " + sessionName + "\nPlease choose a new name for the session.\nAlphanumeric - no spaces or special characters!");

                            if (value === null) {
                                return;
                            }

                            if (value !== "") {
                                var format = /[ `!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/;
                                if (format.test(value)) {
                                    alert("Error: The chosen session name contained disallowed characters.");
                                } else {
                                    renameSession(sessionId, value);
                                }
                            } else {
                                return;
                            }
                        }
                    });

                $sessionItem.append($infoHead);

                const $trashIcon = $('<div>')
                    .addClass('trash-icon')
                    .html('<i class="fa fa-trash"></i>')
                    .on('click', function (e) {
                        e.stopPropagation();
                        if (typeof swal === "function") {
                            swal({
                                title: "Session: " + sessionName,
                                text: "Terminate the session and its running programs?",
                                type: "warning",
                                html: true,
                                confirmButtonText: "Terminate Session",
                                showCancelButton: true
                            }, function() {
                                closeSession(sessionId);
                            });
                        } else {
                            closeSession(sessionId);
                        }
                    });

                $sessionItem.append($trashIcon);

                const $popupIcon = $('<div>')
                    .addClass('popup-icon')
                    .html('<i class="fa fa-window-restore"></i>')
                    .on('click', function (e) {
                        e.stopPropagation();
                        popupSession(sessionId);
                    });

                $sessionItem.append($popupIcon);

                if (session.preview_success) {
                    const canvasWidth = 300;
                    const canvasHeight = 150;
                    const $canvas = $('<canvas>')
                        .attr('width', canvasWidth)
                        .attr('height', canvasHeight);

                    const canvas = $canvas[0];
                    const ctx = canvas.getContext('2d');

                    ctx.fillStyle = '#000000';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);

                    let fontSize = 12;
                    const padding = 10;
                    const lineHeightFactor = 1.2;
                    let lineHeight = fontSize * lineHeightFactor;

                    const lines = sessionPreview.split('\n');
                    const totalLines = lines.length;

                    const maxContentHeight = totalLines * lineHeight;
                    const scalingFactor = Math.min(1, (canvasHeight - 2 * padding) / maxContentHeight);

                    fontSize = Math.floor(fontSize * scalingFactor);
                    lineHeight = fontSize * lineHeightFactor;

                    ctx.font = `${fontSize}px monospace`;
                    ctx.fillStyle = '#ffffff';

                    lines.forEach((line, index) => {
                        const y = padding + (index + 1) * lineHeight;
                        if (y <= canvasHeight - padding) {
                            ctx.fillText(line, padding, y);
                        }
                    });

                    $sessionItem.append($canvas);
                } else {
                    const $fallbackText = $('<div>')
                        .addClass('fallback-text')
                        .text("No preview available for this session.");

                    $sessionItem.append($fallbackText);
                }

                const $infoFooter = $('<div>')
                    .addClass('info-footer')
                    .text(`${session.created_at}`);
                $sessionItem.append($infoFooter);

                $sessionListContainer.append($sessionItem);
            });
        } else {
            console.error('Failed to fetch sessions - invalid response.');
        }
        if (!data.success && data.error) {
            console.warn('Error processing sessions:', data.error)
        }
    }).fail(function (xhr, status, error) {
        console.error('Error fetching sessions:', error);
    });
    clearTimeout(timers.fetchSessions);
    timers.fetchSessions = setTimeout(fetchSessions, 3000);
}

function createNewSession() {
// CHECKED - OK
    $.getJSON('/plugins/dwttm/include/dwttm_new_session.php', function (response) {
        if (response.success && response.session_id) {
            fetchSessions();
            connectToSession(response.session_id);
        } else {
            if (typeof swal === "function") {
                swal("Error", "Failed to create a new session, maybe it already exists?", "error");
            } else {
                alert('Failed to create a new session, maybe it already exists?');
            }
        }
    }).fail(function (xhr, status, error) {
        console.error('Failed to create a new session:', error);
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed to create a new session:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed to create a new session: ${error}`);
        }
    });
}

function createNewNamedSession(sessionName) {
// CHECKED - OK
    $.getJSON('/plugins/dwttm/include/dwttm_new_session.php', { session: sessionName }, function (response) {
        if (response.success && response.session_id) {
            fetchSessions();
            connectToSession(response.session_id);
        } else {
            if (typeof swal === "function") {
                swal("Error", "Failed to create a new session.", "error");
            } else {
                alert('Failed to create a new session.');
            }
        }
    }).fail(function (xhr, status, error) {
        console.error('Failed to create a new session:', error);
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed to create a new session:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed to create a new session: ${error}`);
        }
    });
}

function closeSession(sessionId) {
// CHECKED - OK
    $.getJSON('/plugins/dwttm/include/dwttm_close_session.php', { session: sessionId }, function (response) {
        if (response.success) {
            fetchSessions();
        } else {
            if (typeof swal === "function") {
                swal({
                    title: "Error",
                    text: "Failed closing session <b>" + sessionId + "</b>:<br><pre>" + response.error + "</pre>Further details may be found in the system log, where applicable.",
                    type: "error",
                    confirmButtonText: 'Close',
                    html: true
                });
            } else {
                alert(`Failed closing session ${sessionId}: ${response.error}`);
            }
        }
    }).fail(function (xhr, status, error) {
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed closing session <b>" + sessionId + "</b>:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed closing session ${sessionId}: ${error}`);
        }
    });
}

function renameSession(sessionId, sessionName) {
// CHECKED - OK
    $.getJSON('/plugins/dwttm/include/dwttm_rename_session.php', { session: sessionId, sessionName: sessionName }, function (response) {
        if (response.success) {
            fetchSessions();
        } else {
            if (typeof swal === "function") {
                swal({
                    title: "Error",
                    text: "Failed renaming session <b>" + sessionId + "</b>:<br><pre>" + response.error + "</pre>Further details may be found in the system log, where applicable.",
                    type: "error",
                    confirmButtonText: 'Close',
                    html: true
                });
            } else {
                alert(`Failed closing session ${sessionId}: ${response.error}`);
            }
        }
    }).fail(function (xhr, status, error) {
        if (typeof swal === "function") {
            swal({
                title: "Error",
                text: "Failed renaming session <b>" + sessionId + "</b>:<br><pre>" + error + "</pre>Further details may be found in the system log, where applicable.",
                type: "error",
                confirmButtonText: 'Close',
                html: true
            });
        } else {
            alert(`Failed renaming session ${sessionId}: ${error}`);
        }
    });
}

function fetchSessionMouse(sessionId) {
// CHECKED - OK
    const $mouseButton = $('#mouse-button');
    $.getJSON('/plugins/dwttm/include/dwttm_mouse_session.php', { session: sessionId }, function (response) {
        if (response.mouse) {
            $mouseButton.off("click");
            $mouseButton.show();
            if(response.mouse === "on") {
                $mouseButton.on( "click", function() {
                    setSessionMouse(sessionId, "off");
                });
                $mouseButton.removeClass("mouse-off");
                $mouseButton.addClass("mouse-on");
            } else {
                $mouseButton.on( "click", function() {
                    setSessionMouse(sessionId, "on");
                });
                $mouseButton.removeClass("mouse-on");
                $mouseButton.addClass("mouse-off");
            }
        } else {
            $mouseButton.off("click");
            $mouseButton.hide();
            console.error('Error while fetching mouse for session:', response.error);
        }
    }).fail(function (xhr, status, error) {
        $mouseButton.off("click");
        $mouseButton.hide();
        console.error('Error fetching mouse for session:', error);
    });
}

function setSessionMouse(sessionId, requestedMouse) {
// CHECKED - OK
    const $mouseButton = $('#mouse-button');
    $.getJSON('/plugins/dwttm/include/dwttm_mouse_session.php', { session: sessionId, mouse: requestedMouse }, function (response) {
        if(response.newmouse) {
            $mouseButton.off("click");
            if(response.newmouse === "on") {
                $mouseButton.on( "click", function() {
                    setSessionMouse(sessionId, "off");
                });
                $mouseButton.removeClass("mouse-off");
                $mouseButton.addClass("mouse-on");
            } else {
                $mouseButton.on( "click", function() {
                    setSessionMouse(sessionId, "on");
                });
                $mouseButton.removeClass("mouse-on");
                $mouseButton.addClass("mouse-off");
            }
            if(response.requestmouse !== response.newmouse) {
                alert("Error setting new mouse mode, try again!");
            }
        } else {
            alert('Error setting mouse for session: ' + response.error);
        }
    }).fail(function (xhr, status, error) {
        alert('Error setting mouse for session: ' + error);
    });
}

function popupSession(sessionId) {
// CHECKED - OK
    const url = `/plugins/dwttm/tterminal.php?session=${encodeURIComponent(sessionId)}`;
    const windowName = `${sessionId}: TTerminal`;

    const width = Math.min(screen.availWidth,1200);
    const height = Math.min(screen.availHeight,800);

    let top = (screen.height - height) / 2;
    if (!top || top < 0) { top = 0; }
    let left = (screen.width - width) / 2;
    if (!left || left < 0) { left = 0; }

    window.open(
        url,
        windowName,
        `width=${width},height=${height},top=${top},left=${left},resizable=no,scrollbars=no`
    );
}

function handleSelectionChange() {
// CHECKED - OK
    if ("" !== term.getSelection()) {
        try {
            document.execCommand("copy");
        } catch (error) {
            console.error("Error copying text:", error);
            return;
        }
    }

    disposable2.dispose();
    term.clearSelection();
    disposable2 = term.onSelectionChange(handleSelectionChange);
}

function sendTerminalSize() {
// CHECKED - OK
    fitAddon.fit();
    const { cols, rows } = term;
    if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
            type: 'resize',
            cols,
            rows,
        }));
    }
}

function connectToSession(sessionId) {
// CHECKED - OK
    freeSession();

    const csrfToken = <?= json_encode($var['csrf_token']); ?>;
    const servicePort = <?= json_encode($dwttm_service_port); ?>;

    <?php if ($dwttm_service_route === "direct"): ?>
        const wsUrl = `ws://${window.location.hostname}:${servicePort}/?session=${encodeURIComponent(sessionId)}&csrf=${encodeURIComponent(csrfToken)}`;
    <?php else: ?>
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${wsProtocol}//${window.location.hostname}/wsproxy/${servicePort}/session/${encodeURIComponent(sessionId)}/csrf/${encodeURIComponent(csrfToken)}`;
    <?php endif; ?>

    ws = new WebSocket(wsUrl);

    $('.session-item').removeClass('connected');

    $('.session-item').filter(function () {
        return $(this).attr('data-session-id') === sessionId;
    }).addClass('connected');

    ws.onopen = () => {
        term.clear();
        sendTerminalSize();
    };

    ws.onmessage = (event) => {
        term.write(event.data);
    };

    ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        if (ws.readyState !== WebSocket.OPEN) {
            term.write('\r\n*** Connection Error: Unable to connect to the requested session. ***\r\n');
            term.write('\r\nThis is can be caused by using TTM direct routing mode in an SSL/VPN environment.\r\n');
            term.write('\r\nPlease check your browser console, change the TTM routing mode and/or restart TTM.\r\n');
        }
    };

    ws.onclose = () => {
        term.write('\r\n*** Disconnected from session ***\r\n');
        freeSession();
    };

    disposable = term.onData(data => {
        if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(data);
        }
    });
    disposable2 = term.onSelectionChange(handleSelectionChange);

    connectedSessionId = sessionId;

    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });

    fetchSessionMouse(sessionId);
}

function checkTTMsettings() {
// CHECKED - OK
    if ($('#SERVICE').val() === 'enable')
        $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/start');
    else
        $('#dwttm-cmd').val('/usr/local/emhttp/plugins/dwttm/scripts/stop');

    if ("<?=$dwttm_running;?>" == 1){
        $('.dwttm-run').prop('disabled', true);
    }else{
        $('.dwttm-run').prop('disabled', false);
    }
}

$(function() {
// CHECKED - OK
    showStatus('ttmd');

    checkTTMsettings();
    $('#SERVICE').change(checkTTMsettings);

    $('.dwttm-numeric').mask('XXXXXXX', {
        translation: {
        'X': {
            pattern: /[0-9]/, optional: true
        }
        }
    });

    <?if($dwttm_running):?>
        const terminalContainer = document.getElementById('terminal-container');

        term.loadAddon(fitAddon);
        term.open(terminalContainer);
        fitAddon.fit();

        term.write("\r\n\r\n\r\n\r\n");
        term.write("\t\t        ##########        \r\n");
        term.write("\t\t   ####################   \r\n");
        term.write("\t\t  ######          ######  \r\n");
        term.write("\t\t  ######          ######  \r\n");
        term.write("\t\t                          \r\n");
        term.write("\t\t  ###  ### -### ###  ###  \r\n");
        term.write("\t\t                          \r\n");
        term.write("\t\t    #### ###  ###  ###    \r\n");
        term.write("\t\t    ###. ###  ###  ###    \r\n");
        term.write("\r\n\t/ TTerminal Manager (TTM) for UNRAID /\r\n\r\n");
        term.write("\x1b[3;38;2;200;200;200m\t\t Please select a terminal session from the GUI...\r\n\r\n\x1b[0m");

        fetchSessions();
    <?endif;?>

    if ( typeof caPluginUpdateCheck === "function" ) {
        caPluginUpdateCheck("dwttm.plg",{name:"TTerminal Manager (TTM)"});
    }
});
</script>
