Menu="Buttons:199"
Link="nav-user"
---
<?
/* Copyright Derek Macias (parts of code from NUT package)
 * Copyright macester (parts of code from NUT package)
 * Copyright gfjardim (parts of code from NUT package)
 * Copyright SimonF (parts of code from NUT package)
 * Copyright Dan Landon (parts of code from Web GUI)
 * Copyright Bergware International (parts of code from Web GUI)
 * Copyright Lime Technology (any and all other parts of Unraid)
 *
 * Copyright desertwitch (as author and maintainer of this file)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 */
?>
<?if(version_compare(parse_ini_file('/etc/unraid-version')['version'],'6.12.0-beta5', '>')):?>
<?if(stripos($path, "dashboard") !== false):?>
<?
    $dwttm_tmp_cfg = @parse_ini_file("/boot/config/plugins/dwttm/dwttm.cfg");
    $dwttm_tmp_running = !empty(shell_exec("pgrep -x ttmd 2>/dev/null"));
    $dwttm_tmp_os_dashboard = trim(isset($dwttm_tmp_cfg['OSDASHBOARD']) ? htmlspecialchars($dwttm_tmp_cfg['OSDASHBOARD']) : 'enable');
?>
<?if($dwttm_tmp_running && $dwttm_tmp_os_dashboard === "enable"):?>
<?
$pluginname = "dwttm";
$dwttm_border = 'border: 1px solid rgba(' . (($display["theme"] == 'white' || $display["theme"] == 'azure') ? '0, 0, 0, 0.1' : '255, 255, 255, 0.1') . ');';
$dwttm_color = 'color: rgba(' . (($display["theme"] == 'white' || $display["theme"] == 'azure') ? '0, 0, 0, 0.3' : '255, 255, 255, 0.3') . ');';

$mytiles[$pluginname]['column2'] =
<<<EOT
<tbody id="dwttm-dashboard" title="Tmux Terminal Manager (TTM)">
    <tr>
        <td>
            <i class="fa fa-tty f32"></i>
                <div class="section">Tmux Terminal Manager (TTM)<br>
		            <span>There are <span id="dwttm-sessions" style="font-weight:bold;"><i class="fa fa-spinner fa-spin icon"></i></span> active persistent terminal sessions.</span>
                </div>
            <a href="/Dashboard/dwTTM" title="_(Go to TTM Settings)_"><i class="fa fa-fw fa-cog control"></i></a>
            <a href="#" title="_(Open TTerminal)_" id="dwttm-tterminal-button"><i class="fa fa-fw fa-terminal control"></i></a>
        </td>
    </tr>
    <tr>
        <td style="padding-left:15px;padding-right:15px;padding-top:5px;">
            <select id="dwttm-sessions-select" style="
                all: unset;
                display: block;
                width: 100%;
                padding: 0 5px;
                {$dwttm_border}
                font-size: 14px;
                height: 30px;
                box-sizing: border-box;
                user-select: none;
                font-style: italic;
                {$dwttm_color}
            ">
                <option value="">Connect to Session...</option>
            </select>
        </td>
    </tr>
</tbody>
EOT;
?>

<script>
    function dwTTMDashButton(sessionId) {
        const width = Math.min(screen.availWidth, 1200);
        const height = Math.min(screen.availHeight, 800);

        let top = (screen.height - height) / 2;
        if (!top || top < 0) { top = 0; }
        let left = (screen.width - width) / 2;
        if (!left || left < 0) { left = 0; }

        if(sessionId) {
            const windowName = `ttm_sess_${sessionId}`;
            window.open(
                `/plugins/dwttm/tterminal.php?session=${encodeURIComponent(sessionId)}`,
                windowName,
                `width=${width},height=${height},top=${top},left=${left},resizable=no,scrollbars=no`
            );
        } else {
            const windowName = "ttm_rand_" + Math.random().toString(36).substr(2, 9);
            window.open(
                '/plugins/dwttm/tterminal.php',
                windowName,
                `width=${width},height=${height},top=${top},left=${left},resizable=no,scrollbars=no`
            );
        }
    }
    function fetchSessions() {
        const dropdown = document.getElementById('dwttm-sessions-select');
        clearTimeout(timers.fetchSessions);
        fetch('/plugins/dwttm/include/dwttm_sessions.php')
            .then(response => response.json())
            .then(data => {
                if (data.response) {
                    const sessions = data.response;
                    let sessionCounter = 0;

                    sessions.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

                    dropdown.onchange = null;

                    const fragment = document.createDocumentFragment();
                    sessions.forEach(session => {
                        sessionCounter++;
                        const option = document.createElement('option');
                        option.value = session.session_id;
                        option.textContent = `${session.session_name} - ${session.created_at}`;
                        fragment.appendChild(option);
                    });

                    if(sessionCounter > 0) {
                        dropdown.innerHTML = '<option value="">Connect to Session...</option>';
                        dropdown.appendChild(fragment);
                    } else {
                        dropdown.innerHTML = '<option value="">There are no active sessions.</option>';
                    }

                    document.getElementById('dwttm-sessions').innerHTML = sessionCounter;

                    dropdown.onchange = function () {
                        const value = this.value;
                        if (value) {
                            dwTTMDashButton(value);
                        }
                    };
                } else {
                    if (data.error) {
                        console.error('Error processing sessions:', data.error)
                    } else {
                        console.error('Error processing sessions, no error message.');
                    }
                }
            })
            .catch(error => {
                console.error('Error fetching sessions:', error);
                dropdown.innerHTML = '<option value="">Error loading sessions.</option>';
            })
            .finally(() => {
                timers.fetchSessions = setTimeout(fetchSessions, 5000);
            });
    }
    $(function() {
        $('#dwttm-tterminal-button').on('click', function (event) {
            event.preventDefault();
            dwTTMDashButton();
        });
        fetchSessions();
    });
</script>

<?endif;?>
<?endif;?>
<?endif;?>
