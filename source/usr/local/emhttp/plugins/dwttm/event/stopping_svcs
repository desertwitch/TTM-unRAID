#!/bin/bash
#
# Copyright Derek Macias (parts of code from NUT package)
# Copyright macester (parts of code from NUT package)
# Copyright gfjardim (parts of code from NUT package)
# Copyright SimonF (parts of code from NUT package)
# Copyright Lime Technology (any and all other parts of Unraid)
#
# Copyright desertwitch (as author and maintainer of this file)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
exec &>/tmp/ttm_arraystop.log

TTMCONF="/boot/config/plugins/dwttm/dwttm.cfg"
[ -e "$TTMCONF" ] && source $TTMCONF

get_descendants_ps() {
    local parent=$1
    local descendants=()

    while IFS= read -r child; do
        [[ "$child" =~ ^[0-9]+$ ]] || continue
        descendants+=("$child")
        readarray -t child_descendants < <(get_descendants_ps "$child" 2>/dev/null)
        for dchild in "${child_descendants[@]}"; do
            [[ "$dchild" =~ ^[0-9]+$ ]] && descendants+=("$dchild")
        done
    done < <(ps --ppid "$parent" -o pid= 2>/dev/null | awk 'NF && $1 ~ /^[0-9]+$/ { print $1 }' 2>/dev/null)

    printf '%s\n' "${descendants[@]}"
}

#
# KILL NO SESSIONS
#
if [[ -z $ARRAYDOWN ]] || [[ $ARRAYDOWN == "disable" ]]; then
    exit 0
fi

#
# KILL ALL TMUX SESSIONS
#
if [[ $ARRAYDOWN == "all" ]]; then
    echo "Killing all Tmux sessions (as configured)..."
    echo "Killing all Tmux sessions (as configured)..." | logger -t "ttm-plugin"

    echo "Enumerating Tmux sessions..."
    declare -A TMUX_SESSIONS
    while IFS='/' read -r session _ _ pid _; do
        TMUX_SESSIONS["$pid"]=$session
    done < <(tmux list-panes -a -F "#{session_id}/#{session_name}/#{pane_id}/#{pane_pid}/#{@byttm}" 2>/dev/null | grep -v preclear 2>/dev/null)
    if [[ -z "${TMUX_SESSIONS[*]}" ]]; then
        echo "No Tmux sessions detected - exiting."
        echo "There are no Tmux sessions that would qualify for killing." | logger -t "ttm-plugin"
        exit 0
    fi

    echo "Killing the sessions that eventually qualified..."
    for SESSION in "${TMUX_SESSIONS[@]}"; do
        if tmux kill-session -t "$SESSION"; then
            echo "Killed Tmux session: $SESSION"
            echo "Killed Tmux session: $SESSION" | logger -t "ttm-plugin"
        else
            echo "Failed killing Tmux session: $SESSION"
            echo "Failed killing Tmux session: $SESSION" | logger -t "ttm-plugin"
        fi
    done
#
# KILL TTM-CREATED TMUX SESSIONS
#
elif [[ $ARRAYDOWN == "ttm" ]]; then
    echo "Killing all TTM sessions (as configured)..."
    echo "Killing all TTM sessions (as configured)..." | logger -t "ttm-plugin"

    echo "Enumerating TTM sessions..."
    declare -A TMUX_SESSIONS
    while IFS='/' read -r session _ _ pid _; do
        TMUX_SESSIONS["$pid"]=$session
    done < <(tmux list-panes -a -F "#{session_id}/#{session_name}/#{pane_id}/#{pane_pid}/#{@byttm}" 2>/dev/null | grep -v preclear 2>/dev/null | grep byttm 2>/dev/null)
    if [[ -z "${TMUX_SESSIONS[*]}" ]]; then
        echo "No TTM sessions detected - exiting."
        echo "There are no TTM sessions that would qualify for killing." | logger -t "ttm-plugin"
        exit 0
    fi

    echo "Killing the sessions that eventually qualified..."
    for SESSION in "${TMUX_SESSIONS[@]}"; do
        if tmux kill-session -t "$SESSION"; then
            echo "Killed TTM session: $SESSION"
            echo "Killed TTM session: $SESSION" | logger -t "ttm-plugin"
        else
            echo "Failed killing TTM session: $SESSION"
            echo "Failed killing TTM session: $SESSION" | logger -t "ttm-plugin"
        fi
    done
#
# KILL ALL OR TTM-CREATED TMUX SESSIONS ACCESSING THE ARRAY/POOLS
#
else
    if [[ $ARRAYDOWN == "allacc" ]]; then
        echo "Killing all Tmux sessions accessing the array/pools (as configured)..."
        echo "Killing all Tmux sessions accessing the array/pools (as configured)..." | logger -t "ttm-plugin"
    else
        echo "Killing all TTM sessions accessing the array/pools (as configured)..."
        echo "Killing all TTM sessions accessing the array/pools (as configured)..." | logger -t "ttm-plugin"
    fi

    echo "Establishing cache/pool locations..."
    if [[ -d /boot/config/pools ]]; then
        cache=$(find /boot/config/pools -type f -name "*.cfg" -exec basename {} .cfg \; 2>/dev/null | sed 's:^:/mnt/:' 2>/dev/null | tr '\n' ' ' 2>/dev/null)
    else
        cache=/mnt/cache
    fi
    [[ -z $cache ]] && cache=/mnt/cache
    echo "Established cache/pool locations are: $cache"

    echo "Enumerating array/pool accessing processes..."
    readarray -t LTOUCH_PIDS < <(lsof -t /mnt/disk[0-9]* "$cache" /mnt/user /mnt/user0 2>/dev/null)
    if [[ ${#LTOUCH_PIDS[@]} -eq 0 ]] || [[ -z "${LTOUCH_PIDS[*]}" ]]; then
        echo "No processes found accessing the array/pools - exiting."
        if [[ $ARRAYDOWN == "allacc" ]]; then
            echo "There are no Tmux sessions that would qualify for killing." | logger -t "ttm-plugin"
        else
            echo "There are no TTM sessions that would qualify for killing." | logger -t "ttm-plugin"
        fi
        exit 0
    fi
    echo "Processes accessing the array/pools are: ${LTOUCH_PIDS[*]}"

    if [[ $ARRAYDOWN == "allacc" ]]; then
        echo "Enumerating Tmux sessions..."
        declare -A TMUX_SESSIONS
        while IFS='/' read -r session _ _ pid _; do
            TMUX_SESSIONS["$pid"]=$session
        done < <(tmux list-panes -a -F "#{session_id}/#{session_name}/#{pane_id}/#{pane_pid}/#{@byttm}" 2>/dev/null | grep -v preclear)
        if [[ -z "${TMUX_SESSIONS[*]}" ]]; then
            echo "No Tmux sessions detected - exiting."
            echo "There are no Tmux sessions that would qualify for killing." | logger -t "ttm-plugin"
            exit 0
        fi
    else
        echo "Enumerating TTM sessions..."
        declare -A TMUX_SESSIONS
        while IFS='/' read -r session _ _ pid _; do
            TMUX_SESSIONS["$pid"]=$session
        done < <(tmux list-panes -a -F "#{session_id}/#{session_name}/#{pane_id}/#{pane_pid}/#{@byttm}" 2>/dev/null | grep -v preclear 2>/dev/null | grep byttm 2>/dev/null)
        if [[ -z "${TMUX_SESSIONS[*]}" ]]; then
            echo "No TTM sessions detected - exiting."
            echo "There are no TTM sessions that would qualify for killing." | logger -t "ttm-plugin"
            exit 0
        fi
    fi

    echo "Considering the sessions to kill..."
    SESSIONS_TO_KILL=()
    for PANE_PID in "${!TMUX_SESSIONS[@]}"; do
        if [[ ! "$PANE_PID" =~ ^[0-9]+$ ]]; then
            echo "-- Invalid parsed pane PID: $PANE_PID"
            continue
        fi

        SESSION=${TMUX_SESSIONS[$PANE_PID]}
        echo "-- Inspecting pane PID: $PANE_PID (session: $SESSION)"

        readarray -t DESCENDANTS < <(get_descendants_ps "$PANE_PID" 2>/dev/null)
        if [[ ${#DESCENDANTS[@]} -eq 0 ]] || [[ -z "${DESCENDANTS[*]}" ]]; then
            echo "-- No descendants found for pane PID $PANE_PID, adding pane PID itself."
            DESCENDANTS=("$PANE_PID")
        else
            DESCENDANTS+=("$PANE_PID")
        fi

        echo "-- Descendants of pane PID $PANE_PID: ${DESCENDANTS[*]}"

        for DESC_PID in "${DESCENDANTS[@]}"; do
            if [[ ! "$DESC_PID" =~ ^[0-9]+$ ]]; then
                echo "-- Invalid parsed descendant PID: $DESC_PID"
                continue
            fi
            for LTOUCH_PID in "${LTOUCH_PIDS[@]}"; do
                if [[ ! "$LTOUCH_PID" =~ ^[0-9]+$ ]]; then
                    echo "-- Invalid parsed lsof PID: $LTOUCH_PID"
                    continue
                fi
                if [[ "$DESC_PID" == "$LTOUCH_PID" ]]; then
                    echo "-- Match: PID $DESC_PID is accessing array/pools in session $SESSION."
                    SESSIONS_TO_KILL+=("$SESSION")
                    break 2
                fi
            done
        done
    done

    echo "Enumerating the sessions to kill..."
    if [[ ${#SESSIONS_TO_KILL[@]} -eq 0 ]] || [[ -z "${SESSIONS_TO_KILL[*]}" ]]; then
        echo "No Tmux sessions are accessing the array/pools - exiting."
        if [[ $ARRAYDOWN == "allacc" ]]; then
            echo "There are no Tmux sessions that would qualify for killing." | logger -t "ttm-plugin"
        else
            echo "There are no TTM sessions that would qualify for killing." | logger -t "ttm-plugin"
        fi
        exit 0
    fi

    echo "Sorting out duplicate sessions from the list..."
    declare -A seen
    U_SESSIONS_TO_KILL=()
    for item in "${SESSIONS_TO_KILL[@]}"; do
        if [[ -z "${seen[$item]}" ]]; then
            U_SESSIONS_TO_KILL+=("$item")
            seen["$item"]=1
        fi
    done

    echo "Killing the sessions that eventually qualified..."
    for SESSION in "${U_SESSIONS_TO_KILL[@]}"; do
        if tmux kill-session -t "$SESSION"; then
            if [[ $ARRAYDOWN == "allacc" ]]; then
                echo "Killed Tmux session: $SESSION"
                echo "Killed Tmux session: $SESSION" | logger -t "ttm-plugin"
            else
                echo "Killed TTM session: $SESSION"
                echo "Killed TTM session: $SESSION" | logger -t "ttm-plugin"
            fi
        else
            if [[ $ARRAYDOWN == "allacc" ]]; then
                echo "Failed killing Tmux session: $SESSION"
                echo "Failed killing Tmux session: $SESSION" | logger -t "ttm-plugin"
            else
                echo "Failed killing TTM session: $SESSION"
                echo "Failed killing TTM session: $SESSION" | logger -t "ttm-plugin"
            fi
        fi
    done
fi
